{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/tables/Tablelist.jsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Table } from \"reactstrap\";\nimport { thead, tbody } from \"variables/general\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport { gql } from 'apollo-boost';\nimport uuid from 'uuid';\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx';\nimport { useQuery, useMutation, useSubscription } from \"@apollo/react-hooks\";\nconst getEmpresas = gql(_templateObject(), queries.getEmpresas);\n\nclass TablesEmpresas extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      error: null,\n      empresas: []\n    };\n  }\n\n  componentWillMount() {}\n\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Table, {\n      key: 2,\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      className: \"text-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, thead.map((prop, key) => {\n      if (key === thead.length - 1) return React.createElement(\"th\", {\n        key: key,\n        className: \"text-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, prop);\n      return React.createElement(\"th\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, prop);\n    }))), React.createElement(Query, {\n      key: uuid(),\n      query: getEmpresas,\n      pollInterval: 3000,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, ({\n      loading,\n      error,\n      data\n    }) => {\n      if (loading) return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"loading...\");\n      if (error) return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, error.message);\n      return React.createElement(\"tbody\", {\n        key: uuid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, data.empresas.map(element => {\n        return React.createElement(EmpresaItem, {\n          key: uuid(),\n          variables: element,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);","map":{"version":3,"sources":["/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/tables/Tablelist.jsx"],"names":["Table","thead","tbody","React","Query","graphql","queries","gql","uuid","EmpresaItem","useQuery","useMutation","useSubscription","getEmpresas","TablesEmpresas","Component","state","loading","error","empresas","componentWillMount","componentDidMount","componentWillUnmount","render","map","prop","key","length","data","message","element"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,mBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,eAAhC,QAAuD,qBAAvD;AAEA,MAAMC,WAAW,GAAGN,GAAH,oBAASD,OAAO,CAACO,WAAjB,CAAjB;;AAEA,MAAMC,cAAN,SAA6BX,KAAK,CAACY,SAAnC,CAA6C;AAAA;AAAA;AAAA,SAEzCC,KAFyC,GAEjC;AACJC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,KAAK,EAAE,IAFH;AAGJC,MAAAA,QAAQ,EAAE;AAHN,KAFiC;AAAA;;AAQzCC,EAAAA,kBAAkB,GAAG,CAEpB;;AAEDC,EAAAA,iBAAiB,GAAG,CAEnB;;AAEDC,EAAAA,oBAAoB,GAAG,CACtB;;AAEDC,EAAAA,MAAM,GAAG;AAEL,WACI,0CACI,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAE,CAAZ;AAAe,MAAA,UAAU,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKtB,KAAK,CAACuB,GAAN,CAAU,CAACC,IAAD,EAAOC,GAAP,KAAe;AACtB,UAAIA,GAAG,KAAKzB,KAAK,CAAC0B,MAAN,GAAe,CAA3B,EACI,OACI;AAAI,QAAA,GAAG,EAAED,GAAT;AAAc,QAAA,SAAS,EAAC,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKD,IADL,CADJ;AAKJ,aAAO;AAAI,QAAA,GAAG,EAAEC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAeD,IAAf,CAAP;AACH,KARA,CADL,CADJ,CADJ,EAcI,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEjB,IAAI,EAAhB;AAAoB,MAAA,KAAK,EAAEK,WAA3B;AAAwC,MAAA,YAAY,EAAE,IAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,CAAC;AAAEI,MAAAA,OAAF;AAAWC,MAAAA,KAAX;AAAkBU,MAAAA;AAAlB,KAAD,KAA8B;AAG3B,UAAIX,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACb,UAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,KAAK,CAACW,OAAV,CAAP;AAGX,aACI;AAAO,QAAA,GAAG,EAAErB,IAAI,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKoB,IAAI,CAACT,QAAL,CAAcK,GAAd,CAAmBM,OAAD,IAAa;AAC5B,eAEI,oBAAC,WAAD;AAAa,UAAA,GAAG,EAAEtB,IAAI,EAAtB;AAA0B,UAAA,SAAS,EAAEsB,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAKH,OANA,CADL,CADJ;AAWH,KAnBL,CAdJ,CADJ,CADJ;AAwCH;;AA7DwC;;AAgE7C,eAAezB,OAAO,CAACQ,WAAD,CAAP,CAAqBC,cAArB,CAAf","sourcesContent":["import { Table } from \"reactstrap\";\nimport { thead, tbody } from \"variables/general\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\"\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport { gql } from 'apollo-boost'\nimport uuid from 'uuid';\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx'\nimport { useQuery, useMutation, useSubscription } from \"@apollo/react-hooks\";\n\nconst getEmpresas = gql`${queries.getEmpresas}`;\n\nclass TablesEmpresas extends React.Component {\n\n    state = {\n        loading: true,\n        error: null,\n        empresas: [],\n    };\n\n    componentWillMount() {\n\n    }\n\n    componentDidMount() {\n\n    }\n\n    componentWillUnmount() {\n    }\n\n    render() {\n\n        return (\n            <>\n                <Table key={2} responsive>\n                    <thead className=\"text-primary\">\n                        <tr>\n                            {thead.map((prop, key) => {\n                                if (key === thead.length - 1)\n                                    return (\n                                        <th key={key} className=\"text-right\">\n                                            {prop}\n                                        </th>\n                                    );\n                                return <th key={key}>{prop}</th>;\n                            })}\n                        </tr>\n                    </thead>\n                    <Query key={uuid()} query={getEmpresas} pollInterval={3000}>\n                        {({ loading, error, data }) => {\n\n\n                            if (loading) return <p>loading...</p>;\n                            if (error) return <p>{error.message}</p>;\n\n\n                            return (\n                                <tbody key={uuid()}>\n                                    {data.empresas.map((element) => {\n                                        return (\n\n                                            <EmpresaItem key={uuid()} variables={element} />\n\n                                        )\n                                    })}\n                                </tbody>\n                            )\n                        }}\n                    </Query>\n                </Table>\n            </>\n        );\n    }\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);\n\n\n"]},"metadata":{},"sourceType":"module"}