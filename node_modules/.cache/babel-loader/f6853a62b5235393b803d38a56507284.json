{"ast":null,"code":"import _slicedToArray from \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/tables/Tablelist.jsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Table } from \"reactstrap\";\nimport { thead, tbody } from \"variables/general\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { Query, ApolloConsumer } from \"react-apollo\";\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport gql from 'graphql-tag';\nimport uuid from 'uuid';\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nconst getEmpresas = gql(_templateObject(), queries.getEmpresasAll);\nconst query = queries.deleteEmpresa;\n\nconst _useMutation = useMutation(query),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      eliminado = _useMutation2[0];\n\nfunction TablesEmpresas() {\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        loading = _useState2[0],\n        NewLoading = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        error = _useState4[0],\n        NuevoError = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        modalIsOpen = _useState6[0],\n        grdModalOpen = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        empresas = _useState8[0],\n        guardarEmpresas = _useState8[1];\n\n  const handleCloseModal = e => {\n    grdModalOpen(false);\n  };\n\n  const handleOpenModal = e => {\n    grdModalOpen(true);\n  };\n\n  const BorrarEmpresas = id => {\n    debugger; // eliminado({ variables: { id } });\n\n    if (loading) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"loading...\");\n    if (error) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, error.message);\n    return React.createElement(Empresas, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  };\n\n  const Empresas = () => {\n    debugger;\n\n    const _useQuery = useQuery(getEmpresas, {\n      pollInterval: 500\n    }),\n          data = _useQuery.data,\n          error = _useQuery.error,\n          loading = _useQuery.loading; // guardarEmpresas(data);\n\n\n    if (loading) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"loading...\");\n    if (error) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, error.message);\n    return React.createElement(\"tbody\", {\n      key: uuid(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, data.empresas.map(element => {\n      return React.createElement(EmpresaItem, {\n        key: uuid(),\n        BorrarEmpresas: eliminado,\n        variables: element,\n        onCloseModal: handleCloseModal,\n        onOpenModal: handleOpenModal,\n        modalIsOpen: modalIsOpen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      });\n    }));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Table, {\n    key: 2,\n    responsive: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    className: \"text-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, thead.map((prop, key) => {\n    if (key === thead.length - 1) return React.createElement(\"th\", {\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, prop);\n    return React.createElement(\"th\", {\n      key: key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, prop);\n  }))), React.createElement(Empresas, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })));\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);","map":{"version":3,"sources":["/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/tables/Tablelist.jsx"],"names":["Table","thead","tbody","React","useState","useEffect","Fragment","Query","ApolloConsumer","graphql","queries","gql","uuid","EmpresaItem","useQuery","useMutation","getEmpresas","getEmpresasAll","query","deleteEmpresa","eliminado","TablesEmpresas","loading","NewLoading","error","NuevoError","modalIsOpen","grdModalOpen","empresas","guardarEmpresas","handleCloseModal","e","handleOpenModal","BorrarEmpresas","id","message","Empresas","pollInterval","data","map","element","prop","key","length"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,mBAA7B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,KAAT,EAAgBC,cAAhB,QAAsC,cAAtC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AAEA,MAAMC,WAAW,GAAGL,GAAH,oBAASD,OAAO,CAACO,cAAjB,CAAjB;AACA,MAAMC,KAAK,GAAGR,OAAO,CAACS,aAAtB;;qBACoBJ,WAAW,CAACG,KAAD,C;;MAAxBE,S;;AAGP,SAASC,cAAT,GAA0B;AAAA,oBAEQjB,QAAQ,CAAC,IAAD,CAFhB;AAAA;AAAA,QAEfkB,OAFe;AAAA,QAENC,UAFM;;AAAA,qBAGMnB,QAAQ,CAAC,IAAD,CAHd;AAAA;AAAA,QAGfoB,KAHe;AAAA,QAGRC,UAHQ;;AAAA,qBAIcrB,QAAQ,CAAC,KAAD,CAJtB;AAAA;AAAA,QAIfsB,WAJe;AAAA,QAIFC,YAJE;;AAAA,qBAKcvB,QAAQ,CAAC,EAAD,CALtB;AAAA;AAAA,QAKfwB,QALe;AAAA,QAKLC,eALK;;AAMtB,QAAMC,gBAAgB,GAAGC,CAAC,IAAI;AAC1BJ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAFD;;AAGA,QAAMK,eAAe,GAAGD,CAAC,IAAI;AACzBJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,QAAMM,cAAc,GAAIC,EAAD,IAAQ;AAC3B,aAD2B,CAI3B;;AAEA,QAAIZ,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACb,QAAIE,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,KAAK,CAACW,OAAV,CAAP;AAEX,WACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH,GAZD;;AAaA,QAAMC,QAAQ,GAAG,MAAM;AACnB;;AADmB,sBAEctB,QAAQ,CAACE,WAAD,EAAc;AAAEqB,MAAAA,YAAY,EAAE;AAAhB,KAAd,CAFtB;AAAA,UAEXC,IAFW,aAEXA,IAFW;AAAA,UAELd,KAFK,aAELA,KAFK;AAAA,UAEEF,OAFF,aAEEA,OAFF,EAGnB;;;AAEA,QAAIA,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACb,QAAIE,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,KAAK,CAACW,OAAV,CAAP;AAEX,WACI;AAAO,MAAA,GAAG,EAAEvB,IAAI,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK0B,IAAI,CAACV,QAAL,CAAcW,GAAd,CAAmBC,OAAD,IAAa;AAC5B,aAEI,oBAAC,WAAD;AACI,QAAA,GAAG,EAAE5B,IAAI,EADb;AAEI,QAAA,cAAc,EAAEQ,SAFpB;AAGI,QAAA,SAAS,EAAEoB,OAHf;AAII,QAAA,YAAY,EAAEV,gBAJlB;AAKI,QAAA,WAAW,EAAEE,eALjB;AAMI,QAAA,WAAW,EAAEN,WANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ;AAUH,KAXA,CADL,CADJ;AAiBH,GAzBD;;AA2BA,SACI,0CACI,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAE,CAAZ;AAAe,IAAA,UAAU,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,SAAS,EAAC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKzB,KAAK,CAACsC,GAAN,CAAU,CAACE,IAAD,EAAOC,GAAP,KAAe;AACtB,QAAIA,GAAG,KAAKzC,KAAK,CAAC0C,MAAN,GAAe,CAA3B,EACI,OACI;AAAI,MAAA,GAAG,EAAED,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,IADL,CADJ;AAKJ,WAAO;AAAI,MAAA,GAAG,EAAEC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAeD,IAAf,CAAP;AACH,GARA,CADL,CADJ,CADJ,EAcI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,CADJ,CADJ;AAoBH;;AAED,eAAehC,OAAO,CAACO,WAAD,CAAP,CAAqBK,cAArB,CAAf","sourcesContent":["import { Table } from \"reactstrap\";\nimport { thead, tbody } from \"variables/general\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { Query, ApolloConsumer } from \"react-apollo\"\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport gql from 'graphql-tag';\nimport uuid from 'uuid';\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx'\nimport { useQuery, useMutation } from '@apollo/react-hooks';\n\nconst getEmpresas = gql`${queries.getEmpresasAll}`;\nconst query = queries.deleteEmpresa;\nconst [eliminado] = useMutation(query);\n\n\nfunction TablesEmpresas() {\n\n    const [loading, NewLoading] = useState(true);\n    const [error, NuevoError] = useState(null);\n    const [modalIsOpen, grdModalOpen] = useState(false);\n    const [empresas, guardarEmpresas] = useState([]);\n    const handleCloseModal = e => {\n        grdModalOpen(false);\n    }\n    const handleOpenModal = e => {\n        grdModalOpen(true);\n    }\n    \n    const BorrarEmpresas = (id) => {\n        debugger\n        \n        \n        // eliminado({ variables: { id } });\n\n        if (loading) return <p>loading...</p>;\n        if (error) return <p>{error.message}</p>;\n\n        return (\n            <Empresas />\n        )\n    }\n    const Empresas = () => {\n        debugger\n        const { data, error, loading } = useQuery(getEmpresas, { pollInterval: 500 });\n        // guardarEmpresas(data);\n\n        if (loading) return <p>loading...</p>;\n        if (error) return <p>{error.message}</p>;\n\n        return (\n            <tbody key={uuid()}>\n                {data.empresas.map((element) => {\n                    return (\n\n                        <EmpresaItem\n                            key={uuid()}\n                            BorrarEmpresas={eliminado}\n                            variables={element}\n                            onCloseModal={handleCloseModal}\n                            onOpenModal={handleOpenModal}\n                            modalIsOpen={modalIsOpen} />\n                    )\n                }\n                )}\n            </tbody>\n        )\n    }\n\n    return (\n        <>\n            <Table key={2} responsive>\n                <thead className=\"text-primary\">\n                    <tr>\n                        {thead.map((prop, key) => {\n                            if (key === thead.length - 1)\n                                return (\n                                    <th key={key}>\n                                        {prop}\n                                    </th>\n                                );\n                            return <th key={key}>{prop}</th>;\n                        })}\n                    </tr>\n                </thead>\n                <Empresas />\n            </Table>\n        </>\n    );\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);\n\n\n"]},"metadata":{},"sourceType":"module"}