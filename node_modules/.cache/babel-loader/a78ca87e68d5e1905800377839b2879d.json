{"ast":null,"code":"import _slicedToArray from \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/Empresa/EmpresaList.jsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { thead, tbody } from \"variables/general\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport gql from 'graphql-tag';\nimport uuid from 'uuid';\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport TableData from 'components/Tables/TableData.jsx';\nconst getEmpresas = gql(_templateObject(), queries.getEmpresasAll);\n\nfunction TablesEmpresas() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        error = _useState2[0],\n        guardarError = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        DataError = _useState4[0],\n        guardarDataError = _useState4[1];\n\n  const Empresas = () => {\n    const query = queries.deleteEmpresa;\n\n    const _useMutation = useMutation(query),\n          _useMutation2 = _slicedToArray(_useMutation, 1),\n          eliminado = _useMutation2[0];\n\n    const _useQuery = useQuery(getEmpresas, {\n      pollInterval: 100\n    }),\n          data = _useQuery.data,\n          error = _useQuery.error,\n          loading = _useQuery.loading;\n\n    if (loading) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"loading...\");\n\n    if (data != undefined) {\n      return React.createElement(\"tbody\", {\n        key: uuid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, data.empresas.map(element => {\n        debugger;\n        return React.createElement(EmpresaItem, {\n          key: uuid(),\n          BorrarEmpresas: eliminado,\n          variables: element,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        });\n      }));\n    } else {\n      guardarError(true);\n      guardarDataError(error);\n      return null;\n    }\n  };\n\n  if (Empresas() === null) {\n    return DataError;\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(TableData, {\n    headers: thead,\n    Items: Empresas,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);","map":{"version":3,"sources":["/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/Empresa/EmpresaList.jsx"],"names":["thead","tbody","React","useState","useEffect","Fragment","graphql","queries","gql","uuid","EmpresaItem","useQuery","useMutation","TableData","getEmpresas","getEmpresasAll","TablesEmpresas","error","guardarError","DataError","guardarDataError","Empresas","query","deleteEmpresa","eliminado","pollInterval","data","loading","undefined","empresas","map","element"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,KAAT,EAAgBC,KAAhB,QAA6B,mBAA7B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AAGA,MAAMC,WAAW,GAAGN,GAAH,oBAASD,OAAO,CAACQ,cAAjB,CAAjB;;AAGA,SAASC,cAAT,GAA0B;AAAA,oBAEKb,QAAQ,CAAC,KAAD,CAFb;AAAA;AAAA,QAEfc,KAFe;AAAA,QAETC,YAFS;;AAAA,qBAGaf,QAAQ,CAAC,KAAD,CAHrB;AAAA;AAAA,QAGfgB,SAHe;AAAA,QAGLC,gBAHK;;AAKtB,QAAMC,QAAQ,GAAG,MAAM;AAEnB,UAAMC,KAAK,GAAGf,OAAO,CAACgB,aAAtB;;AAFmB,yBAGCX,WAAW,CAACU,KAAD,CAHZ;AAAA;AAAA,UAGZE,SAHY;;AAAA,sBAIcb,QAAQ,CAACG,WAAD,EAAc;AAAEW,MAAAA,YAAY,EAAE;AAAhB,KAAd,CAJtB;AAAA,UAIXC,IAJW,aAIXA,IAJW;AAAA,UAILT,KAJK,aAILA,KAJK;AAAA,UAIEU,OAJF,aAIEA,OAJF;;AAMnB,QAAIA,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;;AACb,QAAID,IAAI,IAAEE,SAAV,EAAoB;AAEhB,aACI;AAAO,QAAA,GAAG,EAAEnB,IAAI,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEKiB,IAAI,CAACG,QAAL,CAAcC,GAAd,CAAmBC,OAAD,IAAa;AAC5B;AACA,eACI,oBAAC,WAAD;AACI,UAAA,GAAG,EAAEtB,IAAI,EADb;AAEI,UAAA,cAAc,EAAEe,SAFpB;AAGI,UAAA,SAAS,EAAEO,OAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,OATA,CAFL,CADJ;AAgBH,KAlBD,MAmBI;AACAb,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,MAAAA,gBAAgB,CAACH,KAAD,CAAhB;AACA,aAAO,IAAP;AACH;AAEJ,GAhCD;;AAkCA,MAAGI,QAAQ,OAAK,IAAhB,EAAqB;AACjB,WAAOF,SAAP;AACH;;AACD,SACI,0CACI,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAEnB,KAApB;AAA2B,IAAA,KAAK,EAAEqB,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH;;AAED,eAAef,OAAO,CAACQ,WAAD,CAAP,CAAqBE,cAArB,CAAf","sourcesContent":["import { thead, tbody } from \"variables/general\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport gql from 'graphql-tag';\nimport uuid from 'uuid';\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx'\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport TableData from 'components/Tables/TableData.jsx'\n\n\nconst getEmpresas = gql`${queries.getEmpresasAll}`;\n\n\nfunction TablesEmpresas() {\n\n    const [error,guardarError]=useState(false);\n    const [DataError,guardarDataError]=useState(false);\n\n    const Empresas = () => {\n\n        const query = queries.deleteEmpresa;\n        const [eliminado] = useMutation(query);\n        const { data, error, loading } = useQuery(getEmpresas, { pollInterval: 100 });\n\n        if (loading) return <p>loading...</p>;\n        if (data!=undefined){\n\n            return (\n                <tbody key={uuid()}>\n                    \n                    {data.empresas.map((element) => {\n                        debugger\n                        return (\n                            <EmpresaItem\n                                key={uuid()}\n                                BorrarEmpresas={eliminado}\n                                variables={element}\n                            />\n                        )\n                    }\n                    )}\n                </tbody>\n            )\n        }\n        else{\n            guardarError(true);\n            guardarDataError(error)\n            return null\n        }\n\n    }\n\n    if(Empresas()===null){\n        return DataError;\n    }\n    return (\n        <>\n            <TableData headers={thead} Items={Empresas} />\n        </>\n    );\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);\n\n\n"]},"metadata":{},"sourceType":"module"}