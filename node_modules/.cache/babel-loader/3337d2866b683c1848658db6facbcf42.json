{"ast":null,"code":"import _slicedToArray from \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/tables/Tablelist.jsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Table } from \"reactstrap\";\nimport { thead, tbody } from \"variables/general\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { Query, ApolloConsumer } from \"react-apollo\";\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport gql from 'graphql-tag';\nimport uuid from 'uuid';\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nconst getEmpresas = gql(_templateObject(), queries.getEmpresasAll);\n\nfunction TablesEmpresas() {\n  const Empresas = () => {\n    const query = queries.deleteEmpresa;\n\n    const _useMutation = useMutation(query),\n          _useMutation2 = _slicedToArray(_useMutation, 1),\n          eliminado = _useMutation2[0];\n\n    const _useQuery = useQuery(getEmpresas, {\n      pollInterval: 100\n    }),\n          data = _useQuery.data,\n          error = _useQuery.error,\n          loading = _useQuery.loading;\n\n    if (loading) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"loading...\");\n    return React.createElement(\"tbody\", {\n      key: uuid(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, data.empresas.map(element => {\n      debugger;\n      return React.createElement(EmpresaItem, {\n        key: uuid(),\n        BorrarEmpresas: eliminado,\n        variables: element,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      });\n    }));\n  };\n\n  return (// <>\n    {\n      /* <Table key={2} responsive>\n         <thead className=\"text-primary\">\n             <tr>\n                 {thead.map((prop, key) => {\n                     if (key === thead.length - 1)\n                         return (\n                             <th key={key}>\n                                 {prop}\n                             </th>\n                         );\n                     return <th key={key}>{prop}</th>;\n                 })}\n             </tr>\n         </thead>\n         <Empresas />\n      </Table>\n      </> */\n    }\n  );\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);","map":{"version":3,"sources":["/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/tables/Tablelist.jsx"],"names":["Table","thead","tbody","React","useState","useEffect","Fragment","Query","ApolloConsumer","graphql","queries","gql","uuid","EmpresaItem","useQuery","useMutation","getEmpresas","getEmpresasAll","TablesEmpresas","Empresas","query","deleteEmpresa","eliminado","pollInterval","data","error","loading","empresas","map","element"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,mBAA7B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,KAAT,EAAgBC,cAAhB,QAAsC,cAAtC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AAEA,MAAMC,WAAW,GAAGL,GAAH,oBAASD,OAAO,CAACO,cAAjB,CAAjB;;AAGA,SAASC,cAAT,GAA0B;AAEtB,QAAMC,QAAQ,GAAG,MAAM;AAEnB,UAAMC,KAAK,GAAGV,OAAO,CAACW,aAAtB;;AAFmB,yBAGCN,WAAW,CAACK,KAAD,CAHZ;AAAA;AAAA,UAGZE,SAHY;;AAAA,sBAIcR,QAAQ,CAACE,WAAD,EAAa;AAAEO,MAAAA,YAAY,EAAE;AAAhB,KAAb,CAJtB;AAAA,UAIXC,IAJW,aAIXA,IAJW;AAAA,UAILC,KAJK,aAILA,KAJK;AAAA,UAIEC,OAJF,aAIEA,OAJF;;AAMnB,QAAIA,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AAET,WACI;AAAO,MAAA,GAAG,EAAEd,IAAI,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKY,IAAI,CAACG,QAAL,CAAcC,GAAd,CAAmBC,OAAD,IAAa;AAC5B;AACA,aACI,oBAAC,WAAD;AACI,QAAA,GAAG,EAAEjB,IAAI,EADb;AAEI,QAAA,cAAc,EAAEU,SAFpB;AAGI,QAAA,SAAS,EAAEO,OAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAOH,KATA,CADL,CADJ;AAeP,GAvBD;;AAyBA,SACI;AACI;AAAC;;;;;;;;;;;;;;;;;AAAD;AAFR;AAoBH;;AAED,eAAepB,OAAO,CAACO,WAAD,CAAP,CAAqBE,cAArB,CAAf","sourcesContent":["import { Table } from \"reactstrap\";\nimport { thead, tbody } from \"variables/general\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { Query, ApolloConsumer } from \"react-apollo\"\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport gql from 'graphql-tag';\nimport uuid from 'uuid';\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx'\nimport { useQuery, useMutation } from '@apollo/react-hooks';\n\nconst getEmpresas = gql`${queries.getEmpresasAll}`;\n\n\nfunction TablesEmpresas() {\n    \n    const Empresas = () => {\n\n        const query = queries.deleteEmpresa;\n        const [eliminado] = useMutation(query);\n        const { data, error, loading } = useQuery(getEmpresas,{ pollInterval: 100});\n\n        if (loading) return <p>loading...</p>;\n\n            return (\n                <tbody key={uuid()}>\n                    {data.empresas.map((element) => {\n                        debugger\n                        return (\n                            <EmpresaItem\n                                key={uuid()}\n                                BorrarEmpresas={eliminado}\n                                variables={element}\n                                 />\n                        )\n                    }\n                    )}\n                </tbody>\n            )\n    }\n\n    return (\n        // <>\n            {/* <Table key={2} responsive>\n                <thead className=\"text-primary\">\n                    <tr>\n                        {thead.map((prop, key) => {\n                            if (key === thead.length - 1)\n                                return (\n                                    <th key={key}>\n                                        {prop}\n                                    </th>\n                                );\n                            return <th key={key}>{prop}</th>;\n                        })}\n                    </tr>\n                </thead>\n                <Empresas />\n            </Table>\n        </> */}\n    );\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);\n\n\n"]},"metadata":{},"sourceType":"module"}