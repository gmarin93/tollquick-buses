{"ast":null,"code":"import _slicedToArray from \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/Empresa/EmpresaList.jsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { thead, tbody } from \"variables/general\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport gql from 'graphql-tag';\nimport uuid from 'uuid';\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport TableData from 'components/Tables/TableData.jsx';\nconst getEmpresas = gql(_templateObject(), queries.getEmpresasAll);\n\nfunction TablesEmpresas() {\n  var DatoError = false;\n\n  const Empresas = () => {\n    const query = queries.deleteEmpresa;\n\n    const _useMutation = useMutation(query),\n          _useMutation2 = _slicedToArray(_useMutation, 1),\n          eliminado = _useMutation2[0];\n\n    const _useQuery = useQuery(getEmpresas, {\n      pollInterval: 100\n    }),\n          data = _useQuery.data,\n          loading = _useQuery.loading;\n\n    if (loading) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"loading...\");\n\n    if (data != undefined) {\n      return React.createElement(\"tbody\", {\n        key: uuid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, data.empresas.map(element => {\n        debugger;\n        return React.createElement(EmpresaItem, {\n          key: uuid(),\n          BorrarEmpresas: eliminado,\n          variables: element,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        });\n      }));\n    } else {\n      DatoError === false ? true : false; // return DatoError;\n    }\n  };\n\n  if (DatoError) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"No hay conexi\\xF3n con la base de datos\");\n  }\n\n  return React.createElement(TableData, {\n    headers: thead,\n    Items: Empresas,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  });\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);","map":{"version":3,"sources":["/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/Empresa/EmpresaList.jsx"],"names":["thead","tbody","React","useState","useEffect","Fragment","graphql","queries","gql","uuid","EmpresaItem","useQuery","useMutation","TableData","getEmpresas","getEmpresasAll","TablesEmpresas","DatoError","Empresas","query","deleteEmpresa","eliminado","pollInterval","data","loading","undefined","empresas","map","element"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,KAAT,EAAgBC,KAAhB,QAA6B,mBAA7B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AAEA,MAAMC,WAAW,GAAGN,GAAH,oBAASD,OAAO,CAACQ,cAAjB,CAAjB;;AAEA,SAASC,cAAT,GAA0B;AAEtB,MAAIC,SAAS,GAAC,KAAd;;AAEA,QAAMC,QAAQ,GAAG,MAAM;AAEnB,UAAMC,KAAK,GAAGZ,OAAO,CAACa,aAAtB;;AAFmB,yBAGCR,WAAW,CAACO,KAAD,CAHZ;AAAA;AAAA,UAGZE,SAHY;;AAAA,sBAIMV,QAAQ,CAACG,WAAD,EAAc;AAAEQ,MAAAA,YAAY,EAAE;AAAhB,KAAd,CAJd;AAAA,UAIXC,IAJW,aAIXA,IAJW;AAAA,UAINC,OAJM,aAINA,OAJM;;AAMnB,QAAIA,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;;AACb,QAAID,IAAI,IAAIE,SAAZ,EAAuB;AAEnB,aACI;AAAO,QAAA,GAAG,EAAEhB,IAAI,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKc,IAAI,CAACG,QAAL,CAAcC,GAAd,CAAmBC,OAAD,IAAa;AAC5B;AACA,eACI,oBAAC,WAAD;AACI,UAAA,GAAG,EAAEnB,IAAI,EADb;AAEI,UAAA,cAAc,EAAEY,SAFpB;AAGI,UAAA,SAAS,EAAEO,OAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,OATA,CADL,CADJ;AAeH,KAjBD,MAkBK;AACDX,MAAAA,SAAS,KAAG,KAAZ,GAAoB,IAApB,GAA2B,KAA3B,CADC,CAED;AACH;AACJ,GA7BD;;AA+BA,MAAIA,SAAJ,EAAe;AACX,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDADJ;AAGH;;AACD,SACI,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAEjB,KAApB;AAA2B,IAAA,KAAK,EAAEkB,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH;;AAED,eAAeZ,OAAO,CAACQ,WAAD,CAAP,CAAqBE,cAArB,CAAf","sourcesContent":["import { thead, tbody } from \"variables/general\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport gql from 'graphql-tag';\nimport uuid from 'uuid';\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx'\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport TableData from 'components/Tables/TableData.jsx'\n\nconst getEmpresas = gql`${queries.getEmpresasAll}`;\n\nfunction TablesEmpresas() {\n\n    var DatoError=false;\n\n    const Empresas = () => {\n        \n        const query = queries.deleteEmpresa;\n        const [eliminado] = useMutation(query);\n        const { data,loading } = useQuery(getEmpresas, { pollInterval: 100 });\n\n        if (loading) return <p>loading...</p>;\n        if (data != undefined) {\n\n            return (\n                <tbody key={uuid()}>\n                    {data.empresas.map((element) => {\n                        debugger\n                        return (\n                            <EmpresaItem\n                                key={uuid()}\n                                BorrarEmpresas={eliminado}\n                                variables={element}\n                            />\n                        )\n                    }\n                    )}\n                </tbody>\n            )\n        }\n        else {\n            DatoError===false ? true : false\n            // return DatoError;\n        }\n    }\n\n    if (DatoError) {\n        return (\n            <p>No hay conexi√≥n con la base de datos</p>\n        )\n    }\n    return (\n        <TableData headers={thead} Items={Empresas} />\n    );\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);\n\n\n"]},"metadata":{},"sourceType":"module"}