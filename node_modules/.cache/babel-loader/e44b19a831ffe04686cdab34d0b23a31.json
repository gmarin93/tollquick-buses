{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar apollo_link_1 = require(\"apollo-link\");\n\nvar TimeoutError_1 = require(\"./TimeoutError\");\n\nvar DEFAULT_TIMEOUT = 15000;\n/**\n * Aborts the request if the timeout expires before the response is received.\n */\n\nvar TimeoutLink =\n/** @class */\nfunction (_super) {\n  __extends(TimeoutLink, _super);\n\n  function TimeoutLink(timeout) {\n    var _this = _super.call(this) || this;\n\n    _this.timeout = timeout || DEFAULT_TIMEOUT;\n    return _this;\n  }\n\n  TimeoutLink.prototype.request = function (operation, forward) {\n    var controller; // override timeout from query context\n\n    var requestTimeout = operation.getContext().timeout || this.timeout; // add abort controller and signal object to fetchOptions if they don't already exist\n\n    if (typeof AbortController !== 'undefined') {\n      var context = operation.getContext();\n      var fetchOptions = context.fetchOptions || {};\n      controller = fetchOptions.controller || new AbortController();\n      fetchOptions = __assign({}, fetchOptions, {\n        controller: controller,\n        signal: controller.signal\n      });\n      operation.setContext({\n        fetchOptions: fetchOptions\n      });\n    }\n\n    var chainObservable = forward(operation); // observable for remaining link chain\n\n    var operationType = operation.query.definitions.find(function (def) {\n      return def.kind === 'OperationDefinition';\n    }).operation;\n\n    if (requestTimeout <= 0 || operationType === 'subscription') {\n      return chainObservable; // skip this link if timeout is zero or it's a subscription request\n    } // create local observable with timeout functionality (unsubscibe from chain observable and\n    // return an error if the timeout expires before chain observable resolves)\n\n\n    var localObservable = new apollo_link_1.Observable(function (observer) {\n      var timer; // listen to chainObservable for result and pass to localObservable if received before timeout\n\n      var subscription = chainObservable.subscribe(function (result) {\n        clearTimeout(timer);\n        observer.next(result);\n        observer.complete();\n      }, function (error) {\n        clearTimeout(timer);\n        observer.error(error);\n        observer.complete();\n      }); // if timeout expires before observable completes, abort call, unsubscribe, and return error\n\n      timer = setTimeout(function () {\n        if (controller) {\n          controller.abort(); // abort fetch operation\n        }\n\n        observer.error(new TimeoutError_1.default('Timeout exceeded', requestTimeout));\n        subscription.unsubscribe();\n      }, requestTimeout);\n      var ctxRef = operation.getContext().timeoutRef;\n\n      if (ctxRef) {\n        ctxRef({\n          unsubscribe: function () {\n            clearTimeout(timer);\n            subscription.unsubscribe();\n          }\n        });\n      } // this function is called when a client unsubscribes from localObservable\n\n\n      return function () {\n        clearTimeout(timer);\n        subscription.unsubscribe();\n      };\n    });\n    return localObservable;\n  };\n\n  return TimeoutLink;\n}(apollo_link_1.ApolloLink);\n\nexports.default = TimeoutLink;","map":null,"metadata":{},"sourceType":"script"}