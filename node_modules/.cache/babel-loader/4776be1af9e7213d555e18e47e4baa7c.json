{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/tables/Tablelist.jsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Table } from \"reactstrap\";\nimport { thead, tbody } from \"variables/general\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport { gql } from 'apollo-boost';\nimport uuid from 'uuid';\nimport { useQuery, useMutation, useSubscription } from \"@apollo/react-hooks\";\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx';\nconst getEmpresas = gql(_templateObject(), queries.getEmpresas);\n\nclass TablesEmpresas extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      error: null,\n      empresas: []\n    };\n  }\n\n  componentWillMount() {}\n\n  componentDidMount() {\n    this.intervalId = setInterval(this.getQueryEmpresas, 5000);\n  }\n\n  getQueryEmpresas() {\n    return React.createElement(Query, {\n      key: uuid(),\n      query: getEmpresas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, ({\n      loading,\n      error,\n      data\n    }) => {\n      if (loading) return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"loading...\");\n      if (error) return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, error.message);\n      return React.createElement(\"tbody\", {\n        key: uuid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, data.empresas.map(element => {\n        return React.createElement(EmpresaItem, {\n          variables: element,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        });\n      }));\n    });\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  } // showEmpresas() {\n  //     var props = this.props;\n  //     if (props.datos) {\n  //         return (\n  //             <tbody key={9}>\n  //                 {this.props.datos.map((element) => {\n  //                     return (\n  //                         <EmpresaItem variables={element} />\n  //                     )\n  //                 })}\n  //             </tbody>\n  //         )\n  //     }\n  //     else {\n  //         console.log('else');\n  //         this.getQueryEmpresas();\n  //     }\n  // }\n\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Table, {\n      key: 2,\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      className: \"text-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, thead.map((prop, key) => {\n      if (key === thead.length - 1) return React.createElement(\"th\", {\n        key: key,\n        className: \"text-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, prop);\n      return React.createElement(\"th\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, prop);\n    }))), this.getQueryEmpresas()));\n  }\n\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);","map":{"version":3,"sources":["/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/tables/Tablelist.jsx"],"names":["Table","thead","tbody","React","Query","graphql","queries","gql","uuid","useQuery","useMutation","useSubscription","EmpresaItem","getEmpresas","TablesEmpresas","Component","state","loading","error","empresas","componentWillMount","componentDidMount","intervalId","setInterval","getQueryEmpresas","data","message","map","element","componentWillUnmount","clearInterval","render","prop","key","length"],"mappings":"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","sourcesContent":["import { Table } from \"reactstrap\";\nimport { thead, tbody } from \"variables/general\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\"\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport { gql } from 'apollo-boost'\nimport uuid from 'uuid';\nimport { useQuery, useMutation, useSubscription } from \"@apollo/react-hooks\";\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx'\n\nconst getEmpresas = gql`${queries.getEmpresas}`;\n\nclass TablesEmpresas extends React.Component {\n\n    state = {\n        loading: true,\n        error: null,\n        empresas: [],\n    };\n\n    componentWillMount() {\n\n\n    }\n\n    componentDidMount() {\n\n        this.intervalId = setInterval(this.getQueryEmpresas, 5000);\n    }\n\n   \n\n    getQueryEmpresas() {\n        return (\n            <Query key={uuid()} query={getEmpresas}>\n                {({ loading, error, data }) => {\n\n                    if (loading) return <p>loading...</p>;\n                    if (error) return <p>{error.message}</p>;\n\n\n                    return (\n                        <tbody key={uuid()}>\n                            {data.empresas.map((element) => {\n                                return (\n\n                                    <EmpresaItem variables={element} />\n\n                                )\n                            })}\n                        </tbody>\n                    )\n                }}\n            </Query>\n        )\n    }\n\n\n    componentWillUnmount() {\n        clearInterval(this.intervalId);\n    }\n\n    // showEmpresas() {\n\n    //     var props = this.props;\n\n    //     if (props.datos) {\n    //         return (\n    //             <tbody key={9}>\n    //                 {this.props.datos.map((element) => {\n    //                     return (\n    //                         <EmpresaItem variables={element} />\n    //                     )\n    //                 })}\n    //             </tbody>\n    //         )\n    //     }\n    //     else {\n    //         console.log('else');\n    //         this.getQueryEmpresas();\n    //     }\n    // }\n\n\n    render() {\n\n        return (\n            <>\n                <Table key={2} responsive>\n                    <thead className=\"text-primary\">\n                        <tr>\n                            {thead.map((prop, key) => {\n                                if (key === thead.length - 1)\n                                    return (\n                                        <th key={key} className=\"text-right\">\n                                            {prop}\n                                        </th>\n                                    );\n                                return <th key={key}>{prop}</th>;\n                            })}\n                        </tr>\n                    </thead>\n                    {this.getQueryEmpresas()}\n                </Table>\n            </>\n        );\n    }\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);\n\n\n"]},"metadata":{},"sourceType":"module"}