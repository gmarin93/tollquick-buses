{"ast":null,"code":"import _slicedToArray from \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/Empresa/EmpresaList.jsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { thead, tbody } from \"variables/general\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport gql from 'graphql-tag';\nimport uuid from 'uuid';\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport TableData from 'components/Tables/TableData.jsx';\nimport { createNotification } from \"components/Notifications/Toast.jsx\";\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nconst getEmpresas = gql(_templateObject(), queries.getEmpresasAll);\n\nfunction TablesEmpresas() {\n  const Empresas = () => {\n    const query = queries.deleteEmpresa;\n\n    const _useMutation = useMutation(query),\n          _useMutation2 = _slicedToArray(_useMutation, 1),\n          eliminado = _useMutation2[0];\n\n    const _useQuery = useQuery(getEmpresas, {\n      pollInterval: 100\n    }),\n          data = _useQuery.data,\n          error = _useQuery.error,\n          loading = _useQuery.loading;\n\n    if (loading) return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"loading...\");\n\n    if (data != undefined) {\n      return React.createElement(\"tbody\", {\n        key: uuid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, data.empresas.map(element => {\n        debugger;\n        return React.createElement(React.Fragment, null, React.createElement(EmpresaItem, {\n          key: uuid(),\n          BorrarEmpresas: eliminado,\n          variables: element,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }), React.createElement(NotificationContainer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }));\n      }));\n    } else {\n      return null;\n    }\n  };\n\n  if (Empresas() === null) {\n    return createNotification(\"errorconectividad\");\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(TableData, {\n    headers: thead,\n    Items: Empresas,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(NotificationContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);","map":{"version":3,"sources":["/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/Empresa/EmpresaList.jsx"],"names":["thead","tbody","React","useState","useEffect","Fragment","graphql","queries","gql","uuid","EmpresaItem","useQuery","useMutation","TableData","createNotification","NotificationContainer","NotificationManager","getEmpresas","getEmpresasAll","TablesEmpresas","Empresas","query","deleteEmpresa","eliminado","pollInterval","data","error","loading","undefined","empresas","map","element"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,KAAT,EAAgBC,KAAhB,QAA6B,mBAA7B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,SAAQC,kBAAR,QAAiC,oCAAjC;AACA,SAASC,qBAAT,EAAgCC,mBAAhC,QAA2D,qBAA3D;AAGA,MAAMC,WAAW,GAAGT,GAAH,oBAASD,OAAO,CAACW,cAAjB,CAAjB;;AAGA,SAASC,cAAT,GAA0B;AAEtB,QAAMC,QAAQ,GAAG,MAAM;AAEnB,UAAMC,KAAK,GAAGd,OAAO,CAACe,aAAtB;;AAFmB,yBAGCV,WAAW,CAACS,KAAD,CAHZ;AAAA;AAAA,UAGZE,SAHY;;AAAA,sBAIcZ,QAAQ,CAACM,WAAD,EAAc;AAAEO,MAAAA,YAAY,EAAE;AAAhB,KAAd,CAJtB;AAAA,UAIXC,IAJW,aAIXA,IAJW;AAAA,UAILC,KAJK,aAILA,KAJK;AAAA,UAIEC,OAJF,aAIEA,OAJF;;AAMnB,QAAIA,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;;AACb,QAAIF,IAAI,IAAEG,SAAV,EAAoB;AAEhB,aACI;AAAO,QAAA,GAAG,EAAEnB,IAAI,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEKgB,IAAI,CAACI,QAAL,CAAcC,GAAd,CAAmBC,OAAD,IAAa;AAC5B;AACA,eACI,0CACA,oBAAC,WAAD;AACI,UAAA,GAAG,EAAEtB,IAAI,EADb;AAEI,UAAA,cAAc,EAAEc,SAFpB;AAGI,UAAA,SAAS,EAAEQ,OAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,EAMC,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAND,CADJ;AAUH,OAZA,CAFL,CADJ;AAmBH,KArBD,MAsBI;AACA,aAAO,IAAP;AACH;AAEJ,GAjCD;;AAmCA,MAAGX,QAAQ,OAAK,IAAhB,EAAqB;AACjB,WAAON,kBAAkB,CAAC,mBAAD,CAAzB;AACH;;AACD,SACI,0CACI,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAEd,KAApB;AAA2B,IAAA,KAAK,EAAEoB,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH;;AAED,eAAed,OAAO,CAACW,WAAD,CAAP,CAAqBE,cAArB,CAAf","sourcesContent":["import { thead, tbody } from \"variables/general\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport gql from 'graphql-tag';\nimport uuid from 'uuid';\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx'\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport TableData from 'components/Tables/TableData.jsx'\nimport {createNotification} from \"components/Notifications/Toast.jsx\"\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\n\n\nconst getEmpresas = gql`${queries.getEmpresasAll}`;\n\n\nfunction TablesEmpresas() {\n\n    const Empresas = () => {\n\n        const query = queries.deleteEmpresa;\n        const [eliminado] = useMutation(query);\n        const { data, error, loading } = useQuery(getEmpresas, { pollInterval: 100 });\n\n        if (loading) return <p>loading...</p>;\n        if (data!=undefined){\n\n            return (\n                <tbody key={uuid()}>\n                    \n                    {data.empresas.map((element) => {\n                        debugger\n                        return (\n                            <>\n                            <EmpresaItem\n                                key={uuid()}\n                                BorrarEmpresas={eliminado}\n                                variables={element}\n                            />\n                             <NotificationContainer /> \n                            </>\n                        )\n                    }\n                    )}\n                </tbody>\n            )\n        }\n        else{\n            return null\n        }\n\n    }\n\n    if(Empresas()===null){\n        return createNotification(\"errorconectividad\");\n    }\n    return (\n        <>\n            <TableData headers={thead} Items={Empresas} />\n            <NotificationContainer /> \n        </>\n    );\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);\n\n\n"]},"metadata":{},"sourceType":"module"}