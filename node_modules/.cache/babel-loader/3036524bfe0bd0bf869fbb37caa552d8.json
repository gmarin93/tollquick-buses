{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/tables/Tablelist.jsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Table } from \"reactstrap\";\nimport { thead, tbody } from \"variables/general\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport { gql } from 'apollo-boost';\nimport uuid from 'uuid';\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx';\nconst getEmpresas = gql(_templateObject(), queries.getEmpresasAll);\n\nclass TablesEmpresas extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      error: null,\n      modalIsOpen: false,\n      empresas: []\n    };\n\n    this.handleCloseModal = e => {\n      this.setState({\n        modalIsOpen: false\n      });\n    };\n\n    this.handleOpenModal = e => {\n      e.preventDefault();\n      this.setState({\n        modalIsOpen: true\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Table, {\n      key: 2,\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      className: \"text-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, thead.map((prop, key) => {\n      if (key === thead.length - 1) return React.createElement(\"th\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, prop);\n      return React.createElement(\"th\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, prop);\n    }))), React.createElement(Query, {\n      key: uuid(),\n      query: getEmpresas,\n      pollInterval: 3000,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, ({\n      loading,\n      error,\n      data\n    }) => {\n      if (loading) return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"loading...\");\n      if (error) return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, error.message);\n      return React.createElement(\"tbody\", {\n        key: uuid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, data.empresas.map(element => {\n        return React.createElement(EmpresaItem, {\n          key: uuid(),\n          variables: element,\n          onCloseModal: this.handleCloseModal,\n          onOpenModal: this.handleOpenModal,\n          modalIsOpen: this.state.modalIsOpen,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);","map":{"version":3,"sources":["/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/tables/Tablelist.jsx"],"names":["Table","thead","tbody","React","Query","graphql","queries","gql","uuid","EmpresaItem","getEmpresas","getEmpresasAll","TablesEmpresas","Component","state","loading","error","modalIsOpen","empresas","handleCloseModal","e","setState","handleOpenModal","preventDefault","render","map","prop","key","length","data","message","element"],"mappings":"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","sourcesContent":["import { Table } from \"reactstrap\";\nimport { thead, tbody } from \"variables/general\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\"\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport { gql } from 'apollo-boost'\nimport uuid from 'uuid';\nimport EmpresaItem from 'components/Empresa/EmpresaItem.jsx'\n\n\nconst getEmpresas = gql`${queries.getEmpresasAll}`;\n\nclass TablesEmpresas extends React.Component {\n\n    state = {\n        loading: true,\n        error: null,\n        modalIsOpen: false,\n        empresas: []\n    };\n\n    handleCloseModal = e => {\n        this.setState({ modalIsOpen: false });\n      }\n    \n      handleOpenModal = e => {\n          e.preventDefault()\n        this.setState({ modalIsOpen: true });\n      }\n    \n    render() {\n\n        return (\n            <>\n                <Table key={2} responsive>\n                    <thead className=\"text-primary\">\n                        <tr>\n                            {thead.map((prop, key) => {\n                                if (key === thead.length - 1)\n                                    return (\n                                        <th key={key}>\n                                            {prop}\n                                        </th>\n                                    );\n                                return <th key={key}>{prop}</th>;\n                            })}\n                        </tr>\n                    </thead>\n                    <Query key={uuid()} query={getEmpresas} pollInterval={3000}>\n                        {({ loading, error, data }) => {\n\n\n                            if (loading) return <p>loading...</p>;\n                            if (error) return <p>{error.message}</p>;\n\n\n                            return (\n                                <tbody key={uuid()}>\n                                    {data.empresas.map((element) => {\n                                        return (\n\n                                            <EmpresaItem \n                                            key={uuid()} \n                                            variables={element}  \n                                            onCloseModal={this.handleCloseModal}\n                                            onOpenModal={this.handleOpenModal}\n                                            modalIsOpen={this.state.modalIsOpen} />\n\n                                        )\n                                    })}\n                                </tbody>\n                            )\n                        }}\n                    </Query>\n                </Table>\n            </>\n        );\n    }\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);\n\n\n"]},"metadata":{},"sourceType":"module"}