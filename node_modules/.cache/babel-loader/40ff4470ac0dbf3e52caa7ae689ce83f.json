{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/tables/Tablelist.jsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\", \"\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Table } from \"reactstrap\";\nimport { thead, tbody } from \"variables/general\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\";\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport { gql } from 'apollo-boost';\nimport uuid from 'uuid';\nconst getEmpresas = gql(_templateObject(), queries.getEmpresas);\n\nclass TablesEmpresas extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      error: null,\n      empresas: []\n    };\n  }\n\n  componentWillMount() {}\n\n  componentDidMount() {// this.fetchData();\n    //this.intervalId = setInterval(this.fetchData, 5000);\n  }\n\n  componentWillUnmount() {} //clearInterval(this.intervalId);\n  // fetchData() {\n  //     const prueba=[];\n  //     return (\n  //     <Query key={4} query={getEmpresas}>\n  //         {({ loading, error, data }) => {\n  //     this.setState({empresas:data.empresas});\n  //         }}\n  //     </Query>\n  //     )\n  // }\n\n\n  showEmpresas() {\n    const props = this.props.datos;\n\n    if (props) {\n      console.log('');\n      return React.createElement(\"tbody\", {\n        key: 9,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, this.props.datos.map(element => {\n        return React.createElement(\"tr\", {\n          key: uuid(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, React.createElement(\"th\", {\n          key: element._id,\n          className: \"text-right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, element.nombre), React.createElement(\"th\", {\n          key: element._id,\n          className: \"text-right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, element.correo), React.createElement(\"th\", {\n          key: element._id,\n          className: \"text-right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, element.canton), React.createElement(\"th\", {\n          key: element._id,\n          className: \"text-right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, element.provincia));\n      }));\n    } else {\n      return React.createElement(Query, {\n        key: 3,\n        query: getEmpresas,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, ({\n        loading,\n        error,\n        data\n      }) => {\n        if (loading) return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, \"loading...\");\n        if (error) return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, error.message);\n        return React.createElement(\"tbody\", {\n          key: 9,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, data.empresas.map(element => {\n          return React.createElement(\"tr\", {\n            key: element._id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }, React.createElement(\"th\", {\n            key: element._id,\n            className: \"text-right\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          }, element.nombre), React.createElement(\"th\", {\n            key: element._id,\n            className: \"text-right\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }, element.correo), React.createElement(\"th\", {\n            key: element._id,\n            className: \"text-right\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, element.canton), React.createElement(\"th\", {\n            key: element._id,\n            className: \"text-right\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106\n            },\n            __self: this\n          }, element.provincia));\n        }));\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Table, {\n      key: 2,\n      responsive: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      className: \"text-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, thead.map((prop, key) => {\n      if (key === thead.length - 1) return React.createElement(\"th\", {\n        key: key,\n        className: \"text-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, prop);\n      return React.createElement(\"th\", {\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, prop);\n    }))), this.showEmpresas()));\n  }\n\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);","map":{"version":3,"sources":["/home/gmarin/Software/TollQuick/fontend2/now-ui-dashboard-react-master/src/components/tables/Tablelist.jsx"],"names":["Table","thead","tbody","React","Query","graphql","queries","gql","uuid","getEmpresas","TablesEmpresas","Component","state","loading","error","empresas","componentWillMount","componentDidMount","componentWillUnmount","showEmpresas","props","datos","console","log","map","element","_id","nombre","correo","canton","provincia","data","message","render","prop","key","length"],"mappings":"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","sourcesContent":["import { Table } from \"reactstrap\";\nimport { thead, tbody } from \"variables/general\";\nimport React from \"react\";\nimport { Query } from \"react-apollo\"\nimport { graphql } from 'react-apollo';\nimport queries from 'queries/Empresas.jsx';\nimport { gql } from 'apollo-boost'\nimport uuid from 'uuid';\n\nconst getEmpresas = gql`${queries.getEmpresas}`;\n\nclass TablesEmpresas extends React.Component {\n\n    state = {\n        loading: true,\n        error: null,\n        empresas: [],\n    };\n\n    componentWillMount(){\n\n\n    }\n    \n    componentDidMount() {\n        \n       // this.fetchData();\n        //this.intervalId = setInterval(this.fetchData, 5000);\n    }\n\n    componentWillUnmount() {\n        //clearInterval(this.intervalId);\n    }\n\n    // fetchData() {\n    //     const prueba=[];\n    //     return (\n    //     <Query key={4} query={getEmpresas}>\n    //         {({ loading, error, data }) => {\n    //     this.setState({empresas:data.empresas});\n    //         }}\n    //     </Query>\n    //     )\n    // }\n\n\n    showEmpresas() {\n\n        const props=this.props.datos;\n\n        if(props){\nconsole.log('')\n            return (\n                <tbody key={9}>\n                    {this.props.datos.map((element) => {\n                        return (\n\n                            <tr key={uuid()}>\n                                <th key={element._id} className=\"text-right\">\n                                    {element.nombre}\n                                </th>\n\n                                <th key={element._id} className=\"text-right\">\n                                    {element.correo}\n                                </th>\n\n                                <th key={element._id} className=\"text-right\">\n                                    {element.canton}\n                                </th>\n\n                                <th key={element._id} className=\"text-right\">\n                                    {element.provincia}\n                                </th>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            )\n        }\n        else{\n            return (\n                <Query key={3} query={getEmpresas}>\n                    {({ loading, error, data }) => {\n                        if (loading) return <p>loading...</p>;\n                        if (error) return <p>{error.message}</p>;\n    \n    \n                        return (\n                            <tbody key={9}>\n                                {data.empresas.map((element) => {\n                                    return (\n    \n                                        <tr key={element._id}>\n                                            <th key={element._id} className=\"text-right\">\n                                                {element.nombre}\n                                            </th>\n    \n                                            <th key={element._id} className=\"text-right\">\n                                                {element.correo}\n                                            </th>\n    \n                                            <th key={element._id} className=\"text-right\">\n                                                {element.canton}\n                                            </th>\n    \n                                            <th key={element._id} className=\"text-right\">\n                                                {element.provincia}\n                                            </th>\n                                        </tr>\n                                    )\n                                })}\n                            </tbody>\n                        )\n                    }}\n                </Query>\n            )\n        }\n        \n\n     \n    }\n\n    render() {\n        return (\n            <>\n                <Table key={2} responsive>\n                    <thead className=\"text-primary\">\n                        <tr>\n                            {thead.map((prop, key) => {\n                                if (key === thead.length - 1)\n                                    return (\n                                        <th key={key} className=\"text-right\">\n                                            {prop}\n                                        </th>\n                                    );\n                                return <th key={key}>{prop}</th>;\n                            })}\n                        </tr>\n                    </thead>\n                    {this.showEmpresas()}\n                </Table>\n            </>\n        );\n    }\n}\n\nexport default graphql(getEmpresas)(TablesEmpresas);\n\n\n"]},"metadata":{},"sourceType":"module"}